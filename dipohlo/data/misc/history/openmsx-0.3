#!/bin/bash

# openMSX 0.8.0 for Linux

export LC_MESSAGES=$(locale -a | grep pt_BR | head -n1)



     app="openMSX wrapper para HotLogo no Gradiente Expert DD+"
  author="Arkanon"
   email="arkanon@lsd.org.br"

  history=(
            "0.3	2011/07/23 (Sáb) 10:39:33 (BRS)"
            "0.2	2011/07/20 (Qua) 07:01:21 (BRS)"
            "0.1	2009/06/22 (Seg) 22:18:00 (BRS)"
          )

     def_rom="hotlogo.rom"
    def_disk="disk"
    def_capt="openmsx-capture"
  def_script="openmsx.tcl"
     tmpdisk="openmsx-disk"
      output="/tmp/openmsx-output"
      md5sum="/tmp/openmsx-md5"



  this=$0
  [ $this = -bash ] && this=${BASH_SOURCE[0]}
  this=$(basename $this)



  shortopts="c:d:f:r:s:DFhRv$EXTRA_OPT"

   try_text="Tente '$this -h' para mais informacoes."

  help_text="\
$app

$author <$email>
v$(IFS=$'\x09'; set ${history[0]}; echo $1 - $2)

Uso: $this [opcoes...]

Opcoes:
   -c <diretorio para armazenar videos|telas|estados capturados>
        def: $def_capt/ no diretorio de trabalho
   -d <diretorio com funcao de disquete>
        def: $def_disk/ embutido nesse executavel
   -f <arquivo de procedimentos Logo dentro do diretorio disquete>
        def: nenhum. O prompt do Logo ficara a espera de que seja digitado um
   -r <arquivo rom>
        def: $def_rom embutido nesse executavel
   -s <script tcl de automacao do openMSX>
        def: $def_script embutido nesse executavel
   -D dump dos valores das variaveis usadas (nao executa o emulador)
   -F lista os arquivos do diretorio disquete embutido no executavel
   -R lista as roms embutidas no executavel
$EXTRA_HELP
   -h este texto de ajuda
   -v versao do wrapper e do openMSX"



                 home=$(readlink -f $HOME)
                  pwd=$(readlink -f $PWD)

         OPENMSX_ROOT=$(readlink -f $(dirname ${BASH_SOURCE[0]}))
         openmsx_home=$home/.openMSX
  OPENMSX_SYSTEM_DATA=$OPENMSX_ROOT/share
    OPENMSX_USER_DATA=$pwd
      LD_LIBRARY_PATH=$OPENMSX_ROOT/lib

             omsx_bin=$OPENMSX_ROOT/openmsx-bin



       opts=$(getopt -n $this -o $shortopts -- "$@")

  [ $? != 0 ] && echo "$try_text" && exit

  eval set -- "$opts"

  while [ $# -ge 1 ]
  do
    case "$1" in
      -c )    capt=$(readlink -f -- "$2"); shift;;
      -d )    DISK=$(readlink -f -- "$2"); shift;;
      -f )    FILE=$2; shift;;
      -r ) try_rom=$2; shift;;
      -s )  script=$2; shift;;
      -D )    show="dump";;
      -F )    show="files";;
      -h )    show="help";;
      -R )    show="roms";;
      -v )    show="version";;
      -- ) shift; break;;
       * ) break;;
    esac
    shift
  done



  [ "$show" = "help" ] && echo "$help_text"



  if [ "$show" = "version" ]
  then
    omsx_date=$(date -d "$(stat -c %y $omsx_bin)" +"%Y/%m/%d (%a) %H:%M:%S (%Z)")
     omsx_ver=$($omsx_bin -v 2>/dev/null | head -n1 | cut -d\  -f2)
    cat << EOT
openMSX	$omsx_ver	$omsx_date
wrapper	${history[0]}
EOT
  fi



  [ "$capt" ] || capt="$pwd/$def_capt"
  out=$(mkdir -p "$capt" 2>&1) || erro="${erro}Erro criando diretorio de captura: $capt\n($out)\n"



  [ "$DISK" ] || DISK="$OPENMSX_ROOT/$def_disk"
  out=$(mkdir -p "$DISK" 2>&1) || erro="${erro}Erro criando diretorio disquete: $DISK\n($out)\n"



  if [ "$script" ]
  then
    [ ! -e "$script" ] && erro="${erro}Script de inicialização não encontrado: $script\n"
  else
    script="$OPENMSX_ROOT/$def_script"
  fi



  if [ "$FILE" ]
  then
    if [ ! -e "$DISK/$FILE" -o "$(basename $FILE)" != "$FILE" ]
    then
      if [ -e "$FILE" ]
      then
        d1=$pwd
        d2=$DISK
        if [ "$d1" != "$d2" ]
        then
          tmpdisk="$pwd/$tmpdisk"
          mkdir -p $tmpdisk
          cp -a $FILE $tmpdisk
          find $tmpdisk -type f -exec md5sum "{}" \; >| $md5sum
          DISK=$tmpdisk
        fi
      else
        [ ! -e "$DISK/$FILE" ] && erro="${erro}Arquivo Logo não encontrado: $FILE\n"
      fi
    fi
    FILE=$(basename $FILE)
  else
    FILE=""
  fi



  if [ "$try_rom" ]
  then
    ROM=$try_rom
    [ ! -e "$ROM" -a $(basename "$ROM") = "$ROM" ] && ROM="$OPENMSX_SYSTEM_DATA/software/$ROM"
    [ ! -e "$ROM" ] && ROM="$ROM.rom"
    [ ! -e "$ROM" ] && ROM="$try_rom.rom"
    if [ ! -e "$ROM" ]
    then
      [ $ROM != "basic.rom" ] && erro="${erro}Arquivo ROM não encontrado: $ROM\n"
    else
      rom_size=$(stat -c %s $ROM)
      rom_type=$(file -b $ROM)
      [ "$rom_type" != "data" ] && erro="${erro}Formato do arquivo ROM inválido: $rom_type\n"
      echo $[8*2**10] $[16*2**10] $[32*2**10] | grep -q $rom_size || erro="${erro}Tamanho do arquivo ROM inválido para MSX1 (8|16|32 KiB): $rom_size\n"
    fi
  else
    ROM="$OPENMSX_SYSTEM_DATA/software/$def_rom"
  fi

    ROM_PREFIX=$(basename $ROM .rom)
  OPENMSX_DATE=$(date +%d-%m-%y)



  msx_ls()
  {
    cd $1
    export BLOCK_SIZE=\'1
    ls='ls -lAgGpd --color=always --time-style="+%Y/%m/%d %a %T %Z" --group-directories-first'
    {
      eval "$ls" {,.[^.]}*$2 | cut -c1,13- | sed "s/^/ /"
      printf "\n TOTAL: %'d bytes\n" $(du -cbs {,.[^.]}*$2 | tail -n1 | cut -f1)
    } 2> /dev/null
  }

  [ "$show" = "roms"  ] && msx_ls $OPENMSX_SYSTEM_DATA/software .rom
  [ "$show" = "files" ] && msx_ls $DISK



  [ "$show" = "dump" ] && echo "
    LD_LIBRARY_PATH	$LD_LIBRARY_PATH

       OPENMSX_ROOT	$OPENMSX_ROOT
  OPENMSX_USER_DATA	$OPENMSX_USER_DATA
OPENMSX_SYSTEM_DATA	$OPENMSX_SYSTEM_DATA
       OPENMSX_DATE	$OPENMSX_DATE

               DISK	$DISK
                ROM	$ROM

         ROM_PREFIX	$ROM_PREFIX
               FILE	$FILE

               home	$home
                pwd	$pwd
       openmsx_home	$openmsx_home
               capt	$capt
             script	$script
"



  [ -e $openmsx_home ] && ( [ -e $openmsx_home-original ] && rm -r $openmsx_home || mv $openmsx_home $openmsx_home-original )

  mkdir -p $openmsx_home

  ln -s $capt $openmsx_home/videos
  ln -s $capt $openmsx_home/screenshots
  ln -s $capt $openmsx_home/savestates

  export     LD_LIBRARY_PATH

  export        OPENMSX_ROOT
  export OPENMSX_SYSTEM_DATA
  export   OPENMSX_USER_DATA
  export        OPENMSX_DATE

  export                DISK
  export                 ROM
  export          ROM_PREFIX
  export                FILE

  [ "$erro" ] \
  && echo -en "$erro" \
  || [ "$show" ] \
     || {
          echo "-----"
          date +"%Y/%m/%d %a %T %Z"
          [ "$erro" ] && echo -e "$erro" || $omsx_bin -script $script
        } >> $output 2>&1

  {
    rmdir $capt
    rmdir $DISK
  } 2> /dev/null

  rm -f .filecache
  rm -r $openmsx_home

  if [ -e $md5sum ]
  then
    find $tmpdisk -type f -exec md5sum "{}" \; >| $md5sum-2
    diff $md5sum $md5sum-2 &> /dev/null && [ -e $tmpdisk ] && rm -r $tmpdisk
    rm $md5sum $md5sum-2
  fi

  [ -e $openmsx_home-original ] && mv $openmsx_home-original $openmsx_home



# EOF
